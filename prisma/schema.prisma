// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  roll String @default("0")
  role String @default("Student")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    email String @unique
    groupNumber String? @unique @default(uuid())
    branch String
    division String
    batch String
    roll String[]
    status String? @default("Pending")
}

model timetable {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      division String @unique
      image String
}

model gd {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      groupNumber String @unique
      files File[]
}

type File {
  roll String
  filename String
}

model gs {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      groupNumber String @unique
      filename String
}

model ha {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      groupNumber String @unique
      filename String?
      blogLink String?
}

model edai {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      groupNumber String @unique
      filename String
      repoLink String
}

model marks {
      id        String   @id @default(auto()) @map("_id") @db.ObjectId
      groupNumber String @unique
      haMarks String 
      gsMarks String 
      gdMarks String 
      edaiMarks String 
      sdpMarks String 
      mseMarks String 
      eseMarks String 
      cvvMarks String 
      r1 String
      r2 String
      r3 String
      r4 String
      r5 String
      r6 String 
}

model courses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  course_code String @unique
  course_name String
  load_type String
  instructor_name String
  conducted String
  branch String
  division String
  year String
  semester String
}

model students {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roll String @unique
  branch String
  division String
  attendance Att[]
}

type Att {
  course_code String
  present String
}